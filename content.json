{"meta":{"title":"Craig's Blog","subtitle":"","description":"CraigBlog 耿嘉宁的博客","author":"Craig Geng","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Leetcode739_每日温度","slug":"Leetcode739-每日温度","date":"2023-07-01T09:46:17.000Z","updated":"2023-07-01T09:58:20.123Z","comments":true,"path":"2023/07/01/Leetcode739-每日温度/","link":"","permalink":"http://example.com/2023/07/01/Leetcode739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/","excerpt":"","text":"Leetcode739.每日温度❓问题请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。 例如，给定一个列表 temperatures &#x3D; [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。 提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。 💡解答最简单方法：暴力循环 O（n2） 改进方法：单调栈 明确以下几点： 单调栈里存放的元素是什么？ ​ ——单调栈里只需要存放元素的下标i就可以了，如果需要使用对应的元素，直接T[i]就可以获取。 单调栈里元素是递增呢？ 还是递减呢？ ​ ——顺序的描述为 从栈头到栈底的顺序，采用递增排序 var dailyTemperatures = function(temperatures) &#123; const n = temperatures.length; const res = Array(n).fill(0); const stack = []; // 递增栈：用于存储元素右面第一个比他大的元素下标 stack.push(0); for (let i = 1; i &lt; n; i++) &#123; while (stack.length &amp;&amp; temperatures[i] &gt; temperatures[stack[stack.length - 1]]) &#123; const top = stack.pop(); res[top] = i - top; &#125; stack.push(i); &#125; return res; &#125;;","categories":[],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"http://example.com/tags/Leetcode/"},{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"单调栈","slug":"单调栈","permalink":"http://example.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"}]},{"title":"Leetcode198_打家劫舍","slug":"Leetcode198-打家劫舍","date":"2023-07-01T09:05:19.000Z","updated":"2023-07-01T09:48:49.794Z","comments":true,"path":"2023/07/01/Leetcode198-打家劫舍/","link":"","permalink":"http://example.com/2023/07/01/Leetcode198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/","excerpt":"","text":"Leetcode198. 打家劫舍❓问题请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。 例如，给定一个列表 temperatures &#x3D; [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。 提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。 💡解答动态规划五部曲： 确定dp数组以及下标的含义 确定递推公式 dp数组如何初始化 确定遍历顺序 举例推导dp数组 确定dp数组（dp table）以及下标的含义 **dp[i]：考虑下标i（包括i）以内的房屋，最多可以偷窃的金额为dp[i]**。 确定递推公式 决定dp[i]的因素就是第i房间偷还是不偷。 如果偷第i房间，那么dp[i] &#x3D; dp[i - 2] + nums[i] ，即：第i-1房一定是不考虑的，找出 下标i-2（包括i-2）以内的房屋，最多可以偷窃的金额为dp[i-2] 加上第i房间偷到的钱。 如果不偷第i房间，那么dp[i] &#x3D; dp[i - 1]，即考 虑i-1房，（注意这里是考虑，并不是一定要偷i-1房，这是很多同学容易混淆的点） 然后dp[i]取最大值，即dp[i] &#x3D; max(dp[i - 2] + nums[i], dp[i - 1]); dp数组如何初始化 从递推公式dp[i] &#x3D; max(dp[i - 2] + nums[i], dp[i - 1]);可以看出，递推公式的基础就是dp[0] 和 dp[1] 从dp[i]的定义上来讲，dp[0] 一定是 nums[0]，dp[1]就是nums[0]和nums[1]的最大值即：dp[1] &#x3D; max(nums[0], nums[1]); 代码如下： // 数组长度 const len = nums.length; // dp数组初始化 const dp = [nums[0], Math.max(nums[0], nums[1])]; 确定遍历顺序 dp[i] 是根据dp[i - 2] 和 dp[i - 1] 推导出来的，那么一定是从前到后遍历！ 代码如下： for (int i = 2; i &lt; nums.size(); i++) &#123; dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]); &#125; 举例推导dp数组 以示例二，输入[2,7,9,3,1]为例。 红框dp[nums.size() - 1]为结果。 代码： const rob = nums =&gt; &#123; // 数组长度 const len = nums.length; // dp数组初始化 const dp = [nums[0], Math.max(nums[0], nums[1])]; // 从下标2开始遍历 for (let i = 2; i &lt; len; i++) &#123; dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]); &#125; return dp[len - 1]; &#125;;","categories":[],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"http://example.com/tags/Leetcode/"},{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"浏览器的缓存机制","slug":"web-20230625","date":"2023-06-25T03:59:30.000Z","updated":"2023-07-02T13:24:55.865Z","comments":true,"path":"2023/06/25/web-20230625/","link":"","permalink":"http://example.com/2023/06/25/web-20230625/","excerpt":"","text":"浏览器的缓存机制 浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识 浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中 以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是强制缓存和协商缓存。 强制缓存强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 Expires 和 Cache-Control，其中Cache-Control优先级比Expires高。 强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下： 不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。 存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。 存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果 ExpiresExpires是HTTP&#x2F;1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。 Cache-Control在HTTP&#x2F;1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为： public：所有内容都将被缓存（客户端和代理服务器都可缓存） private：所有内容只有客户端可以缓存，Cache-Control的默认取值 no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定 no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存 max-age&#x3D;xxx (xxx is numeric)：缓存内容将在xxx秒后失效 协商缓存协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：Last-Modified / If-Modified-Since 和 Etag / If-None-Match，其中Etag &#x2F; If-None-Match的优先级比Last-Modified &#x2F; If-Modified-Since高。协商缓存主要有以下两种情况： 协商缓存生效，返回304 协商缓存失效，返回200和请求结果结果 Last-Modified &#x2F; If-Modified-SinceLast-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间， If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件， Etag &#x2F; If-None-MatchEtag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成) 通常服务器生成并返回在Etag中的验证码，常常是文件内容的哈希值或者某个其他指纹码。客户端不必了解指纹码是如何生成的，只需要在下一个请求中将其发送给服务器(浏览器默认会添加)：如果指纹码仍然一致，说明资源未被修改，服务器会返回304 Not Modified，这样我们就可以跳过下载，利用已经缓存了的资源，并且该资源会继续缓存120s。 If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200，如下。","categories":[],"tags":[{"name":"浏览器","slug":"浏览器","permalink":"http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"缓存机制","slug":"缓存机制","permalink":"http://example.com/tags/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"},{"name":"强制缓存","slug":"强制缓存","permalink":"http://example.com/tags/%E5%BC%BA%E5%88%B6%E7%BC%93%E5%AD%98/"},{"name":"协商缓存","slug":"协商缓存","permalink":"http://example.com/tags/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/"}]},{"title":"节流与防抖","slug":"js-20230624-2","date":"2023-06-24T12:53:00.000Z","updated":"2023-07-02T14:23:31.473Z","comments":true,"path":"2023/06/24/js-20230624-2/","link":"","permalink":"http://example.com/2023/06/24/js-20230624-2/","excerpt":"","text":"节流与防抖函数防抖（debounce） 函数节流（throttle） 都是为了限制函数的执行频次，以优化函数触发频率过高导致的响应速度跟不上触发频率，出现延迟或卡顿的现象。 防抖（Debounce）防抖： 触发高频事件，n秒后，函数会执行一次，如果n秒内高频事件再次被触发，则重新计算时间。 应用场景： 登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖 调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖 文本编辑器实时保存，当无任何更改操作一秒后进行保存 如下图，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会执行handle函数。 function debounce(fn, delay)&#123; let timer = null return function() &#123; if(timer) clearTimeout(timer) timer = setTimeout(() =&gt; &#123; fn.apply(this, arguments); timer = null &#125;, delay) &#125; &#125; 节流（throttle）节流：高频事件触发，但在n秒内只会执行一次真正的事件处理函数，所以节流会稀释函数的执行频率。原理是通过判断是否有延迟调用函数未执行。 应用场景： 鼠标连续不断地触发某事件（如点击），单位时间内只触发一次； 监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断。例如：懒加载； 浏览器播放事件，每个一秒计算一次进度信息等 如下图，持续触发scroll事件时，并不立即执行handle函数，每隔1000毫秒才会执行一次handle函数。 function throttle(fn, delay)&#123; let timer = null return function()&#123; if(timer) return timer = setTimeout(()=&gt;&#123; fn.apply(this, arguments) timer = null &#125;,delay) &#125; &#125;","categories":[],"tags":[]},{"title":"ES6新特性解析","slug":"js-20230624-1","date":"2023-06-24T12:01:29.000Z","updated":"2023-07-02T14:20:06.724Z","comments":true,"path":"2023/06/24/js-20230624-1/","link":"","permalink":"http://example.com/2023/06/24/js-20230624-1/","excerpt":"","text":"ES6新特性解析ES6语法中箭头函数()&#x3D;&gt;{} 与function的区别？ this的指向：使用function定义的函数，this的指向随着调用环境的变化而变化的，而箭头函数中的this指向是固定不变的，永远指向它定义时的上层作用域中的this，即一直指向的是定义函数的环境 构造函数：function是可以定义构造函数的，而箭头函数是不行的。 变量提升：由于js的内存机制，function的级别最高，而用箭头函数定义函数的时候，需要var(let const定义的时候更不必说)关键词，而var所定义的变量不能得到变量提升。故箭头函数一定要定义于调用之前！（function不用） 箭头函数只能声明匿名函数可通过表达式让函数具名，function既可以声明匿名也可由声明具名函数 var、let、const的区别？ 作用域：let和const具有块级作用域，var不存在块级作用域,可以跨块访问, 不能跨函数访问。var出来的变量是全局的，但是不能跨函数访问 变量提升：什么是变量提升？变量能在声明之前使用，就是变量提升。var存在变量提升，let和const不存在变量提升 var在js中是支持预解析的声明出来的就不会报错是undefined，let，const就会报错 全局属性：浏览器的全局对象是window。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性（window.a 可以访问到），但是let和const不会 重复声明：let const不可重复声明，var可以只会记录最后一个值。 暂时性死区：在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区 初始值：在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。 指针指向：let和const都是ES6新语法， let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。 应用场景： 块级作用域解决了ES5中的两个问题： 内层变量可能覆盖外层变量 用来计数的循环变量泄露为全局变量 应用场景：以后声明变量使用 let 就对了 应用场景：声明对象类型使用 const，非对象类型声明选择 let 没有特殊情况就不要用var了","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"ES6","slug":"ES6","permalink":"http://example.com/tags/ES6/"},{"name":"const,","slug":"const","permalink":"http://example.com/tags/const/"},{"name":"var","slug":"var","permalink":"http://example.com/tags/var/"},{"name":"let","slug":"let","permalink":"http://example.com/tags/let/"},{"name":"箭头函数","slug":"箭头函数","permalink":"http://example.com/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"},{"name":"function函数","slug":"function函数","permalink":"http://example.com/tags/function%E5%87%BD%E6%95%B0/"}]},{"title":"CSS实现元素水平垂直居中","slug":"css-20230624-1","date":"2023-06-24T11:27:12.000Z","updated":"2023-07-10T03:42:38.189Z","comments":true,"path":"2023/06/24/css-20230624-1/","link":"","permalink":"http://example.com/2023/06/24/css-20230624-1/","excerpt":"","text":"CSS实现元素水平垂直居中分类已知元素宽高 父元素相对定位 absolute + 负margin top50%left50% margin为子元素宽高一半 absolute + margin auto topbottomleftright &#x3D; 0 absolute + calc（50% - 1&#x2F;2 width | height） 未知元素宽高 父元素Flex justify-content align-items 父元素Grid 子元素 justify-self align-self Absolute transform:translate(-50%,-50%)","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"居中","slug":"居中","permalink":"http://example.com/tags/%E5%B1%85%E4%B8%AD/"}]},{"title":"Position详解","slug":"css-20230624","date":"2023-06-24T08:18:35.000Z","updated":"2023-06-24T10:17:29.650Z","comments":true,"path":"2023/06/24/css-20230624/","link":"","permalink":"http://example.com/2023/06/24/css-20230624/","excerpt":"","text":"细说PositionPosition总共有五个取值，分别为static默认定位，absolute绝对定位，relative相对定位，fixed固定定位和sticky粘性定位。 Static默认定位该元素使用正常布局，此时 top、right、bottom、left 属性无效。 Absolute绝对定位绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于html absolute 定位使元素的位置与文档流无关，因此不占据空间。绝对定位后会脱离文档流 absolute 定位的元素和其他元素重叠。 Relative相对定位relative 相对定位元素的定位是相对其正常位置。就是相对于原来的位置进行定位 设置relative属性但不设置top left right Fixed固定定位元素的位置相对于浏览器窗口是固定位置。 即使窗口是滚动的它也不会移动。 Fixed定位使元素的位置与文档流无关，因此不占据空间。 Fixed定位的元素和其他元素重叠。 Sticky粘性定位包含了 relative 与 fixed 这两种定位模式，但不是同时存在，需要一个触发条件，即边偏移 top &#x2F; right &#x2F; bottom &#x2F; left 的值达到后就会切换 fixed 方式，不同定位方式，就分别显示该方式的定位特征。 举例子就是广告。","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"Position属性","slug":"Position属性","permalink":"http://example.com/tags/Position%E5%B1%9E%E6%80%A7/"}]},{"title":"事件循环","slug":"js-20230624","date":"2023-06-24T08:09:38.000Z","updated":"2023-06-24T14:06:38.456Z","comments":true,"path":"2023/06/24/js-20230624/","link":"","permalink":"http://example.com/2023/06/24/js-20230624/","excerpt":"","text":"浏览器中的事件循环（EventLoop）微任务与宏任务JS是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。 微任务，是语言提供的，Promise.then，MutationObserver 宏任务，是宿主环境提供的，比如浏览器，script主代码块，setImmediate setTimeout，setInterval 事件循环可以简单的描述为以下四个步骤: 函数入栈，当Stack中执行到异步任务的时候，就将他丢给WebAPIs,接着执行同步任务,直到Stack为空； 此期间WebAPIs完成这个事件，把回调函数放入队列中等待执行（微任务放到微任务队列，宏任务放到宏任务队列） 执行栈为空时，Event Loop把微任务队列执行清空； 微任务队列清空后，进入宏任务队列，取队列的第一项任务放入Stack(栈）中执行，执行完成后，查看微任务队列是否有任务，有的话，清空微任务队列。重复4，继续从宏任务中取任务执行，执行完成之后，继续清空微任务，如此反复循环，直至清空所有的任务。 同步代码，微任务异步代码，宏任务异步代码。。。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"事件循环","slug":"事件循环","permalink":"http://example.com/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"}]},{"title":"前端跨域问题","slug":"web-20230624","date":"2023-06-24T08:08:37.000Z","updated":"2023-06-24T10:10:26.359Z","comments":true,"path":"2023/06/24/web-20230624/","link":"","permalink":"http://example.com/2023/06/24/web-20230624/","excerpt":"","text":"聊聊跨域问题起源跨域问题的产生源于浏览器的同源策略，浏览器要求网页只能够获取与自身来源同源的资源。同源代表着协议，域名与端口均要相同 问题跨域问题会导致以下三个问题： Cookie、LocalStorage 和 IndexDB 无法读取 DOM 和 Js对象无法获得 AJAX 请求不能发送 解决方式 JSONP(JSON with Padding) 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数，并在script标签内设置一个回调执行函数 但是缺点明显：只能实现get一种请求。 服务端要设置Content-Type为application&#x2F;json，并获取callback参数值 跨域资源共享（CORS） 普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。Access-Control-Allow-Credentials，允许前端带认证cookie：启用此项后，上面的域名不能为’*’，必须指定具体的域名，否则浏览器会提示 nginx代理跨域 nginx反向代理接口跨域 跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。 实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。 nginx具体配置： #proxy服务器 server &#123; listen 81; server_name www.domain1.com; location / &#123; proxy_pass http://www.domain2.com:8080; #反向代理 proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名 index index.html index.htm; # 当用webpack-dev-server等中间件代理接口访问nginx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用 add_header Access-Control-Allow-Origin http://www.domain1.com; #当前端只跨域不带cookie时，可为* add_header Access-Control-Allow-Credentials true; &#125; &#125;","categories":[],"tags":[{"name":"跨域","slug":"跨域","permalink":"http://example.com/tags/%E8%B7%A8%E5%9F%9F/"},{"name":"网络","slug":"网络","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"JS 栈与堆、浅拷贝与深拷贝","slug":"js-20230623","date":"2023-06-23T11:30:50.000Z","updated":"2023-07-02T14:20:38.616Z","comments":true,"path":"2023/06/23/js-20230623/","link":"","permalink":"http://example.com/2023/06/23/js-20230623/","excerpt":"","text":"JS 栈与堆、浅拷贝与深拷贝栈内存与堆内存栈内存：JS中的基础数据类型（固定大小）存放于栈内存中（Number，String，Boolean，Null，Undefined），访问时是按值访问。 堆内存：JS中的引用数据类型（大小不固定）存放于堆内存中（Array，Object），访问时是按引用访问。访问保存在栈内存中的一个地址。地址与堆内存中的存储位置对应。变量存在于栈内存中，对象存在于堆内存中。 内存的生命周期JS环境中分配的内存一般有如下生命周期： 内存分配：当我们申明变量、函数、对象的时候，系统会自动为他们分配内存 内存使用：即读写内存，也就是使用变量、函数等 内存回收：使用完毕，由垃圾回收机制自动回收不再使用的内存 浅拷贝与深拷贝与赋值 赋值：赋值的是栈中的地址，不是堆中的数据。两个对象是联动的。 浅拷贝：重新在堆中创建内存，基本数据类型互不影响，引用类型因共享同一块内存，会相互影响。 深拷贝：从堆内存中开辟一个新的区域存放新对象，对对象中的子对象进行递归拷贝,拷贝前后的两个对象互不影响。 浅拷贝与深拷贝的实现方式浅拷贝： Object.assign() lodash的 _.clone方法 ES6 …展开运算符 深拷贝： JSON.parse(JSON.stringify()) lodash 的 _.deepclone方法 手写 function deepClone(obj, hash = new WeakMap()) &#123; if (obj === null) return obj; // 如果是null或者undefined我就不进行拷贝操作 if (obj instanceof Date) return new Date(obj); if (obj instanceof RegExp) return new RegExp(obj); // 可能是对象或者普通的值 如果是函数的话是不需要深拷贝 if (typeof obj !== &quot;object&quot;) return obj; // 是对象的话就要进行深拷贝 if (hash.get(obj)) return hash.get(obj); let cloneObj = new obj.constructor(); // 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身 hash.set(obj, cloneObj); for (let key in obj) &#123; if (obj.hasOwnProperty(key)) &#123; // 实现一个递归拷贝 cloneObj[key] = deepClone(obj[key], hash); &#125; &#125; return cloneObj; &#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"栈与堆","slug":"栈与堆","permalink":"http://example.com/tags/%E6%A0%88%E4%B8%8E%E5%A0%86/"},{"name":"深拷贝","slug":"深拷贝","permalink":"http://example.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"},{"name":"浅拷贝","slug":"浅拷贝","permalink":"http://example.com/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"}]},{"title":"常见网络安全问题及解决方案","slug":"cybersecurity-20230623","date":"2023-06-23T09:09:51.000Z","updated":"2023-07-02T14:21:11.614Z","comments":true,"path":"2023/06/23/cybersecurity-20230623/","link":"","permalink":"http://example.com/2023/06/23/cybersecurity-20230623/","excerpt":"","text":"常见网络安全问题及解决方案XSS攻击（跨站脚本攻击）XSS是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全,任何可以输入的地方都有可能引起,包括表单、URL… 分类 存储型XSS攻击 首先黑客利用站点漏洞将一段恶意 JavaScript 代码提交到被攻击的网站的数据库中； 然后用户向网站请求包含了恶意 JavaScript 脚本的页面； 当用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器。 反射型XSS攻击 攻击者构造出特殊的 URL，其中包含恶意代码。 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。 基于DOM的XSS攻击 攻击者通过某种方式，将恶意脚本代码插入到网页中的某个元素中，比如一个输入框或者链接等。 受害者浏览器通过解析HTML代码生成文档对象模型（DOM）树，恶意脚本代码被加入到DOM树中。 当受害者与网页进行交互时，例如点击一个链接、提交表单等操作，浏览器就会执行恶意脚本代码。 恶意脚本代码可以执行一些攻击者预设好的操作，如窃取cookie信息、更改页面内容、将受害者重定向到恶意网站等。 防御措施 现代浏览器支持防御部分XSS攻击，在http设置X-XSS-Protection响应头，1为开启0为关闭，mode&#x3D;block意为如果检测到XSS攻击阻止整个界面 在Cookie和HTTP头中设置HTTP-Only和secure属性，以免被XSS攻击者获取 合理使用CSP（Content Security Policy）来限制第三方内容的注入，它分别可以使用HTTP请求、HTML mate表情的形式来开启 跨站请求伪造（CSRF）CSRF 攻击是攻击者利用浏览器在发起请求时自动带上 cookie 的特性，借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。 攻击流程 受害者登录 a.com，并保留了登录凭证（Cookie）； 攻击者引诱受害者访问了 b.com； b.com 向 a.com 发送了一个请求：a.com&#x2F;act&#x3D;xx浏览器会默认携带a.com的Cookie； a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求； a.com以受害者的名义执行了act&#x3D;xx； 攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作； 攻击类型 ET型：如在页面的某个 img 中发起一个 get 请求 POST型：通过自动提交表单到恶意网站 链接型：需要诱导用户点击链接 防御措施 Cookie 的 SameSite 属性，对于现代浏览器，在 HTTP 响应头中，通过 set-cookie 字段设置 Cookie 时，可以带上 SameSite 选项。 Strict 仅允许一方请求携带 Cookie，即浏览器将只发送相同站点请求的 Cookie，即当前网页 URL 与请求目标 URL 完全一致。 Lax 允许部分第三方请求携带 Cookie None 无论是否跨站都会发送 Cookie 同源检查，由服务器端验证当前请求的来源站点，HTTP 请求头中的 Referer 和 Origin 属性； 页面级别的token，将Token输出到页面中，页面提交的请求携带这个Token，服务器验证Token是否正确； 验证码，后端接口加验证码校验，让攻击方无法在用户无感知的情况下正常调用接口","categories":[],"tags":[{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"XSS","slug":"XSS","permalink":"http://example.com/tags/XSS/"},{"name":"CRSF","slug":"CRSF","permalink":"http://example.com/tags/CRSF/"}]},{"title":"== 与 ===","slug":"js-20230619","date":"2023-06-23T08:41:33.000Z","updated":"2023-06-23T09:15:20.931Z","comments":true,"path":"2023/06/23/js-20230619/","link":"","permalink":"http://example.com/2023/06/23/js-20230619/","excerpt":"","text":"JavaScript 中的’&#x3D;&#x3D;’ 与’&#x3D;&#x3D;&#x3D;’定义“&#x3D;&#x3D;“叫做相等运算符，”&#x3D;&#x3D;&#x3D;”叫做严格运算符 区别 对于String, number这些基础类型，&#x3D;&#x3D;操作符会先把两边的变量进行类型强制转换成相同的类型再比较是否相等；&#x3D;&#x3D;&#x3D;操作符则不会进行类型转换，而是直接进行比较。 对于array, object这些高级类型，&#x3D;&#x3D;和 &#x3D;&#x3D;&#x3D;是没有区别的，因为它们比较的是 “指针地址” 。 对于基础类型和高级类型，&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;是有区别的；&#x3D;&#x3D;操作符会先把高级类型转换为基础类型之后，进行值的比较；&#x3D;&#x3D;&#x3D;操作符则不会进行转换，类型比较，如果不同，直接返回false examle: 66 == &#39;66&#39; // True 66 === &#39;66&#39; // False 特别注意 对于特殊值NaN（Not a Number），表示非数字，NaN和任何数（包括它自己）做相等比较，都会返回false，所以判断NaN最好用isNaN()函数 null和undefined，两者值比较为True（&#x3D;&#x3D;），类型比较为False（&#x3D;&#x3D;&#x3D;）","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"基础知识","slug":"基础知识","permalink":"http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"面试题","slug":"面试题","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"","slug":"Note_Web&Browser","date":"2023-06-14T16:40:21.745Z","updated":"2023-06-25T12:55:49.932Z","comments":true,"path":"2023/06/15/Note_Web&Browser/","link":"","permalink":"http://example.com/2023/06/15/Note_Web&Browser/","excerpt":"","text":"网络与浏览器1.浏览器在输入网址到显示网页的过程 用户输入网址：用户在浏览器的地址栏中输入网址，例如：”","categories":[],"tags":[]},{"title":"Note_Interview","slug":"Note-Interview","date":"2023-03-20T13:45:19.000Z","updated":"2023-06-25T12:55:52.927Z","comments":true,"path":"2023/03/20/Note-Interview/","link":"","permalink":"http://example.com/2023/03/20/Note-Interview/","excerpt":"","text":"面试问题准备HTMLCSS采用scss使得对css开发更灵活设置变量$ xxx, 统一UI风格，减少冗余代码。 JS怎么理解TypescriptTypescript是JavaScript + TypeSystem，是JS的一个超集。TypeScript的 JavaScript是一个动态类型语言，程序运行期间才做数据类型检查的语言。TypeScript是一个静态类型语言程序编译期间做数据类型检查的语言 TypeScript 核心：解决 JavaScript 编程中的类型安全问题 配合IDE、编辑器提供更强大的代码智能提示&#x2F;检查 可以帮助我们更好地编写代码。代码即文档 程序编译阶段（配合IDE、编辑器甚至可以在编码阶段）即可发现一些潜在错误，避免程序在生产环境运行了以后再出现错误； 编码规范、有利于团队开发协作、也更有利于大型项目开发、项目重构 缺点是麻烦且缺少灵活性 前端工程化Webpack 五大核心概念： Entry 入口从哪个文件开始打包 Output 输出到哪里，如何命名 Loader webpack本身只能处理js和json，其他资源需要loader来处理 Plugin通过插件扩展webpack功能 Mode 模式开发和生产 Development 和 Production Loader与plugin的区别 Loader用于对源代码文件进行转换和处理，Plugin用于对Webpack的编译过程进行扩展和增强。 Loader用于转换特定类型的文件，例如css，babel，图片等 loader运行在打包文件之前（loader为在模块加载时的预处理文件）；plugins在整个编译周期都起作用 Webpack与ViteWebpack 是一个基于打包器的构建工具，同一个入口文件的代码会打包成一个 Bundle 文件。Webpack 长期来的一个痛点是对于大规模应用的应用启动和热更新速度很慢。当文件发生变动时，bundle会被重新构建 项目打包优化Terser-webpack-plugin用来去除生产环境中的console以及debugger等信息。 Git面试题Git 常用命令查看分支：git branch 提交git commit创建分支：git branch xxx切换分支：git checkout创建+切换分支：git checkout -b合并某分支到当前分支：git merge删除分支：git branch -d Git发现冲突怎么办 将自己的代码提交至本地仓库 git add git commit 切换开发分支，从远程仓库拉取代码 git pull 使用git merge合并分支 git push 推送分支 ![image-20230510153525859](&#x2F;Users&#x2F;gengjianing&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230510153525859.png) ![image-20230510153703459](&#x2F;Users&#x2F;gengjianing&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230510153703459.png) ![image-20230510153757540](&#x2F;Users&#x2F;gengjianing&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230510153757540.png) ![image-20230510160115159](&#x2F;Users&#x2F;gengjianing&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230510160115159.png) ![image-20230510163316006](&#x2F;Users&#x2F;gengjianing&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230510163316006.png)","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"Note_React","slug":"Note-React","date":"2023-03-10T06:19:52.000Z","updated":"2023-06-25T12:55:27.906Z","comments":true,"path":"2023/03/10/Note-React/","link":"","permalink":"http://example.com/2023/03/10/Note-React/","excerpt":"","text":"React笔记React特点： 虚拟DOM 避免操作实际DOM的繁复操作，降低API复杂度 避免兼容性问题 拥有更好的性能 声明式编程——JSX（JS Extension） 基于组件的——可复用性，解耦合 React 三个 API： React.createElement() 标签名必须小写 属性中事件必须用驼峰命名法，值为一个函数。&#x2F;&#x2F; Class属性需要使用className 注意：React的虚拟DOM最后都会变成真实DOM。React的元素一旦创建，无法再修改，只能通过重新创建来替换。 React.createRoot() ReactObject.render() 调用render渲染页面时，会对比两次虚拟DOM，DOM 差分算法（DOM diffing algorithm），只在真实DOM中替换变更的。 React确保每次渲染对真实DOM做最少的修改 JSX（JavaScript Syntax Extension） JSX 是 React.createElement()的语法糖，JSX在执行前会被Babel转换为JS代码 注意： JSX不是字符串 JSX中，HTML标签小写，React组件首字母大写 JSX只有一个根标签 JSX标签必须正确结束 eg:&lt;input type:’text’&#x2F;&gt; JSX可以用{}嵌入表达式，但表达式值为bool，null，undefined，不会显示 JSX中属性可以直接在标签中设置，但是class替换为className,style要用对象， 虚拟DOMJSX显示 时候，每个元素都要有一个唯一key。没有key的话，React的DOM比较算法就是顺序比较，如果数组头部内容变化，后面都会变化，会导致性能问题。所以要设置一个key作为id的作用，这样在比较DOM时，按照ID比较。 一般在开发中，将数据的id作为key。React默认使用数组的索引作为key。 组件 函数组件 () &#x3D;&gt; { return 我是函数组件 } &#x2F; function (){ } VScode rfc可以创建代码块 类组件 Props 用于父组件向子组件传递参数 xxx&#x3D;{}来传递 props.xxx来使用 props.children表示标签内的内容 props.className表示标签的类名 ` &#96;叫作模板字符串 State与生命周期 React中，组件渲染完毕，在修改组件的变量，是不会重新渲染的。 需要一个特殊变量记录，且会重新渲染页面。 需要用钩子函数useState() 函数返回两个值，第一个是值本身，第二个是set函数。可用解构语法赋值。 state其实就是一个变量的值，在调用setState修改变量值的时候，且变量值改变时，才会重新调用react渲染。 setState()是异步执行的，不是改完立刻生效的。——所以当setState()调用需要用到旧state值时，可能出现计算出错 为了避免上面这种情况，通过回调函数的形式来修改state——setState((state) &#x3D;&gt; { return state }) React会确保将最新的state值作为参数传递。 setState()的执行流程：setState() -&gt; ReactDOM dispatchSetDate() -&gt; 判断组件处于什么阶段 1.渲染阶段：不会检查state值是否相同 2.非渲染阶段：会检查state值是否相同，值不同时会将组件挂在到渲染队列上，重新渲染。（在值相同时，React在一些情况下会继续执行当前组件的渲染，但这个渲染不会触发子组件渲染，且不实际生效 某些情况：值第一次相同） 在React中获取原生DOM 通过document进行DOM操作 通过React获取DOM对象 创建存储DOM容器——useRef() 钩子函数 默认返回{current : undefined} 简单的js对象。 ​ 所以直接创建一个js对象{current : null}，也可以。但是区别：我们创建的对象，每次重新渲染会获得一个新对象。useRef会确保每次获得同一个对象。 将容器设置为想要获取DOM对象元素的ref&#x3D;{ref}属性 HOOK钩子函数注意事项 钩子函数只能在React中的函数组件和自定义钩子函数中使用 钩子函数只能在函数组件中调用，不能在组件内新建函数里调用。 类组件 VScode rcc自动创建代码片段。 类组件的Props，可通过实例对象直接访问。this.props 类组件的state，可通过实例对象直接访问。this.state。并通过this.setState()对其进行修改。 Portal 子组件通常作为父组件的后代渲染到页面上。 通过Portal可以将组件渲染到页面上的指定位置。 使用方法 在index.html中添加一个新元素 修改组件的渲染方式 通过ReactDom.createPortal() 作为返回值创建元素。 方法有两个参数，一个是jsx原先返回的代码，一个是目标位置的DOM元素。 React中的CSS CSS模块 使用步骤 创建一个xxx.module.css 在项目中通过import引入 import classes(起个名字) from ‘xxx.module.css’ 通过classes设置类 className&#x3D;{classes.p1} React中的Context Context相当于一个公共存储空间 我们可将多个组件公用的数据，存入context而不用通过props逐层传递 使用方法 通过React.createContext(defaultValue)创建context 并导出 在目标组件js中导入context 使用&lt;Context.Consumer&gt;创建标签，内部需要一个回调函数，参数为ctx。可通过ctx访问创建Context时传入的数据。 Context.Provider表示数据生产者可以通过value属性定义context中存储的数据。使得该组件中所有的子组件都能访问到Context 通过Context访问数据时，会优先访问离他最近的provider中的数据 使用钩子函数useContext(xxx)获取context，将Context中数据作为返回值返回。 Effect函数 React组件有部分逻辑都可以直接编写到组件的函数体中的，像是对数组调用filter、map等方法，像是判断某个组件是否显示等。但是有一部分逻辑如果直接写在函数体中，会影响到组件的渲染，这部分会产生“副作用”的代码，是一定不能直接写在函数体中。 例如，如果直接将修改state的逻辑编写到了组件之中，就会导致组件不断的循环渲染，直至调用次数过多内存溢出。 通过useEffect(() &#x3D;&gt; {})将有副作用的代码放到里面执行useEffect()中的回调函数会在组件每次渲染完毕之后执行，这也是它和写在函数体中代码的最大的不同，函数体中的代码会在组件渲染前执行，而useEffect()中的代码是在组件渲染后才执行，这就避免了代码的执行影响到组件渲染。 依赖项数组，指定后只有在依赖项发生变化时，useEffect才会执行。如果为空数组，则只会在初始化时出发一次 Effect 回调函数最后可以返回一个函数，作为effect 的清理函数，在下次useEffect执行前执行。在这个函数中可以做一些工作，清除上个回调函数带来的影响例如开定时器 React中的memo函数 它是一个高阶函数，接受一个组件作为输入，返回一个包装过的新组件 包装后具有缓存功能，只有props发生变化，才会触发新的渲染，否则一直返回缓存内的。 React中的useCallback() 参数 回调函数 依赖数组，只有依赖数组中的变量发生变化时，回调函数才会重新创建 。不设置依赖数组则每回渲染都会重新创建。 依赖数组为空，则只会在组件初始化时才会重新创建。 ![image-20230510164753478](&#x2F;Users&#x2F;gengjianing&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230510164753478.png) ReduceruseReducer的使用场景：当一个state需要维护多个数据且它们之间互相依赖。这样业务代码中只需要通过dispatch来更新state，繁杂的逻辑都在reducer函数中了。 ![image-20230510164717388](&#x2F;Users&#x2F;gengjianing&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230510164717388.png) useRef![image-20230510164953724](&#x2F;Users&#x2F;gengjianing&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230510164953724.png) React中的自定义钩子 React的钩子函数只能在函数组件和自定义钩子中应用 React的自定义钩子是一个以use开头的普通函数 Redux Redux是一个专为JS应用设计的可预期的状态容器 可预期：Redux中的各种操作结果是确定的，通过Reducer来实现 容器：对React中的各种状态State进行管理，增删改查。 Redux可以理解为Reducer和Context的结合体。Reducer可以管理复杂的state，提炼并消除冗余代码。Context使得State可以更加方便的传递，而不是使用props自上而下的一层一层传递。 ReduxToolkit（RTK） 安装 npm install react-redux @reduxjs&#x2F;toolkit 帮助我们处理redux冗余操作 createSlice()创造reducer切片，传入一个配置对象作为参数{ ​ name:’’用于生成action的type ​ initialState:{}state初始值 ​ reducers:{ ​ 方法:setName(state, action){}, setAge{}… 传入的参数是代理对象，可以直接修改，无需解构再修改 }指定对于state各种操作 } slice.actions 自动生成action创建器函数，调用函数自动创建actioin对象。{type:’&#x2F;name&#x2F;函数名’，payload:函数参数} configureStore()通过slice创建store对象，参数为配置对象{ ​ reducer:{ ​ student: slice.reducer ​ } } export store对象 标签包裹app，然后传入store。 useSelecter()获取state数据 useDispatch()获取派发器对象，dispatch(setName(“沙和尚”))传入参数是action.payload React-Router 两种模式History模式对应BrowserRouter，Hash模式对应HashRouter 写法 组件写法 ​ ​ &lt;Route path&#x3D;’&#x2F;‘ element&#x3D;{}&gt; ​ &lt;Route path&#x3D;’&#x2F;Home’ element&#x3D;{}&gt; 在main中引入Router，且替换掉App组件 在App组件中，引入Outlet占位符，类似于展示组件的窗口 路由表写法(对象) const route &#x3D; [ ​ { ​ path:’&#x2F;‘, ​ element:’’ ​ } ] main中使用包裹 路由重定向，将Route中的element设置为Navigate组件，并设置to React生命周期 React16之前 React16之后 安装 当组件的实例被创建并插入到 DOM 中时，这些方法按以下顺序调用： constructor() static getDerivedStateFromProps() render() componentDidMount() 更新中 更新可能由道具或状态的更改引起。当重新渲染组件时，这些方法按以下顺序调用： static getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate() 卸载 当组件从 DOM 中移除时调用此方法： componentWillUnmount()","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"React","slug":"React","permalink":"http://example.com/tags/React/"}]},{"title":"剑指offerDay03","slug":"剑指offerDay03","date":"2023-03-06T09:47:27.000Z","updated":"2023-03-06T09:56:57.615Z","comments":true,"path":"2023/03/06/剑指offerDay03/","link":"","permalink":"http://example.com/2023/03/06/%E5%89%91%E6%8C%87offerDay03/","excerpt":"","text":"剑指offerDay02——字符串（简单）剑指offer 05 替换空格 💡思路： 新建一个StringBuilder，逐字符复制，遇到空格则用“%20”替代 原地修改更省内存 class Solution &#123; public String replaceSpace(String s) &#123; StringBuilder res = new StringBuilder(); for(Character c : s.toCharArray()) &#123; if(c == &#39; &#39;) res.append(&quot;%20&quot;); else res.append(c); &#125; return res.toString(); &#125; &#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"剑指offer","slug":"剑指offer","permalink":"http://example.com/tags/%E5%89%91%E6%8C%87offer/"}]},{"title":"剑指offerDay02","slug":"剑指offerDay02","date":"2023-03-04T03:30:12.000Z","updated":"2023-03-04T09:00:15.310Z","comments":true,"path":"2023/03/04/剑指offerDay02/","link":"","permalink":"http://example.com/2023/03/04/%E5%89%91%E6%8C%87offerDay02/","excerpt":"","text":"剑指offerDay02——链表（简单）剑指offer 06 从尾到头打印链表 💡思路： 递归法，先递归到达链表尾部，再用push(head.val)将节点值添加进数组 循环法，JS可以用数组的unshift方法来从头插入数据，也可以用push + reverse 操作 /** * Definition for singly-linked list. * function ListNode(val) &#123; * this.val = val; * this.next = null; * &#125; */ /** * @param &#123;ListNode&#125; head * @return &#123;number[]&#125; */ var reversePrint = function(head) &#123; let res = [] while (head) &#123; res.unshift(head.val) head = head.next &#125; return res &#125;; var reversePrint = function(head) &#123; let res = [] while (head) &#123; res.push(head.val) head = head.next &#125; return res.reverse() &#125;; var reversePrint = function (head) &#123; if(!head) return [] let result = reversePrint(head.next) result.push(head.val); return result &#125;; 剑指offer24 反转链表 💡思路： JS ES6中的解构语法，可以很好的进行赋值。 /** * Definition for singly-linked list. * function ListNode(val) &#123; * this.val = val; * this.next = null; * &#125; */ /** * @param &#123;ListNode&#125; head * @return &#123;ListNode&#125; */ var reverseList = function(head) &#123; let [p,c] = [null, head] while(c)&#123; [c.next,c,p] = [p,c.next,c] &#125; return p &#125;; 剑指offer35 复杂链表的复制 💡思路： 使用hash Map简历原节点 -&gt; 新节点的映射，先复制普通的val与next指针，后根据Map复制random指针 复制各节点，并建立 “原节点 -&gt; 新节点” 的 Map 映射 构建新链表的 next 和 random 指向 返回新链表的头节点 也可先直接将新节点与旧节点连接至一个列表上，再进行新旧列表的拆分。 复制各节点，并构建拼接链表 构建各新节点的 random 指向 拆分两链表 /** * // Definition for a Node. * function Node(val, next, random) &#123; * this.val = val; * this.next = next; * this.random = random; * &#125;; */ /** * @param &#123;Node&#125; head * @return &#123;Node&#125; */ var copyRandomList = function(head) &#123; if(head === null)&#123; return head &#125; let curr = head let newHead = new Node() let newCurr = newHead let map = new Map() while(curr)&#123; newCurr.val = curr.val newCurr.next = curr.next ? new Node() : null map.set(curr, newCurr) newCurr = newCurr.next curr = curr.next &#125; newCurr = newHead while(head)&#123; newCurr.random = head.random ? map.get(head.random) : null head = head.next newCurr = newCurr.next &#125; return newHead &#125;; // 拼接+拆分链表，空间复杂度O(1) var copyRandomList = function(head)&#123; if(!head) return head; let node = head; // 复制节点，将新节点放到原节点后面 while(node)&#123; node.next = new Node(node.val, node.next); node = node.next.next; &#125; node = head; // 构建新节点的random指向 while(node)&#123; if(node.random !== null) node.next.random = node.random.next; node = node.next.next; &#125; // 拆分链表 let newNode = head.next, res = newNode; node = head; while(node.next &amp;&amp; newNode.next)&#123; node.next = node.next.next; newNode.next = newNode.next.next; node = node.next; newNode = newNode.next; &#125; node.next= null; // 返回新链表的头结点 return res; &#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"剑指offer","slug":"剑指offer","permalink":"http://example.com/tags/%E5%89%91%E6%8C%87offer/"}]},{"title":"剑指offerDay01","slug":"剑指offerDay01","date":"2023-03-03T03:27:41.000Z","updated":"2023-03-04T06:00:53.605Z","comments":true,"path":"2023/03/03/剑指offerDay01/","link":"","permalink":"http://example.com/2023/03/03/%E5%89%91%E6%8C%87offerDay01/","excerpt":"","text":"剑指offerDay01——栈与队列（简单）剑指offer 09 用两个栈实现队列 💡思路： 两个栈分别作用是入队栈、出队栈 appendTail方法直接在入队栈内push deleteHead方法需要检查两个栈的长度，先判断出队栈，再判断入队栈。 均为空 -&gt; 队列为空 出队空，入队不空 -&gt; 先用out.push(in.pop)操作将入队栈的元素放入出队栈（两个栈的特性自然维护队列的特性），再pop出队栈. var CQueue = function() &#123; this.inStack = []; this.outStack = []; &#125;; /** * @param &#123;number&#125; value * @return &#123;void&#125; */ CQueue.prototype.appendTail = function(value) &#123; this.inStack.push(value); &#125;; /** * @return &#123;number&#125; */ CQueue.prototype.deleteHead = function() &#123; if (!this.outStack.length) &#123; if (!this.inStack.length) &#123; return -1; &#125; this.in2out(); &#125; return this.outStack.pop(); &#125;; CQueue.prototype.in2out = function() &#123; while (this.inStack.length) &#123; this.outStack.push(this.inStack.pop()); &#125; &#125;; /** * Your CQueue object will be instantiated and called as such: * var obj = new CQueue() * obj.appendTail(value) * var param_2 = obj.deleteHead() */ 剑指offer 30 包含min函数的栈 💡思路： 设置辅助栈，原栈push时，min栈同时保存当前整个栈的min值，即push当前元素和min栈栈顶元素更小的那一个。 注意开始辅助栈，放入无穷大（Infinity） var MinStack = function() &#123; this.x_stack = []; this.min_stack = [Infinity]; &#125;; MinStack.prototype.push = function(x) &#123; this.x_stack.push(x); this.min_stack.push(Math.min(this.min_stack[this.min_stack.length - 1], x)); &#125;; MinStack.prototype.pop = function() &#123; this.x_stack.pop(); this.min_stack.pop(); &#125;; MinStack.prototype.top = function() &#123; return this.x_stack[this.x_stack.length - 1]; &#125;; MinStack.prototype.min = function() &#123; return this.min_stack[this.min_stack.length - 1]; &#125;;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"剑指offer","slug":"剑指offer","permalink":"http://example.com/tags/%E5%89%91%E6%8C%87offer/"}]},{"title":"我的第一篇文章","slug":"我的第一篇文章","date":"2022-08-31T01:45:38.601Z","updated":"2022-09-02T08:31:30.722Z","comments":true,"path":"2022/08/31/我的第一篇文章/","link":"","permalink":"http://example.com/2022/08/31/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/","excerpt":"","text":"你好Hexo你好世界我的Github个人网站","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-08-31T01:43:54.393Z","updated":"2022-08-31T01:43:54.393Z","comments":true,"path":"2022/08/31/hello-world/","link":"","permalink":"http://example.com/2022/08/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"http://example.com/tags/Leetcode/"},{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"单调栈","slug":"单调栈","permalink":"http://example.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"},{"name":"动态规划","slug":"动态规划","permalink":"http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"浏览器","slug":"浏览器","permalink":"http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"缓存机制","slug":"缓存机制","permalink":"http://example.com/tags/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"},{"name":"强制缓存","slug":"强制缓存","permalink":"http://example.com/tags/%E5%BC%BA%E5%88%B6%E7%BC%93%E5%AD%98/"},{"name":"协商缓存","slug":"协商缓存","permalink":"http://example.com/tags/%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"ES6","slug":"ES6","permalink":"http://example.com/tags/ES6/"},{"name":"const,","slug":"const","permalink":"http://example.com/tags/const/"},{"name":"var","slug":"var","permalink":"http://example.com/tags/var/"},{"name":"let","slug":"let","permalink":"http://example.com/tags/let/"},{"name":"箭头函数","slug":"箭头函数","permalink":"http://example.com/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"},{"name":"function函数","slug":"function函数","permalink":"http://example.com/tags/function%E5%87%BD%E6%95%B0/"},{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"居中","slug":"居中","permalink":"http://example.com/tags/%E5%B1%85%E4%B8%AD/"},{"name":"Position属性","slug":"Position属性","permalink":"http://example.com/tags/Position%E5%B1%9E%E6%80%A7/"},{"name":"事件循环","slug":"事件循环","permalink":"http://example.com/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"},{"name":"跨域","slug":"跨域","permalink":"http://example.com/tags/%E8%B7%A8%E5%9F%9F/"},{"name":"网络","slug":"网络","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"栈与堆","slug":"栈与堆","permalink":"http://example.com/tags/%E6%A0%88%E4%B8%8E%E5%A0%86/"},{"name":"深拷贝","slug":"深拷贝","permalink":"http://example.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"},{"name":"浅拷贝","slug":"浅拷贝","permalink":"http://example.com/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"},{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"XSS","slug":"XSS","permalink":"http://example.com/tags/XSS/"},{"name":"CRSF","slug":"CRSF","permalink":"http://example.com/tags/CRSF/"},{"name":"基础知识","slug":"基础知识","permalink":"http://example.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"面试题","slug":"面试题","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"React","slug":"React","permalink":"http://example.com/tags/React/"},{"name":"剑指offer","slug":"剑指offer","permalink":"http://example.com/tags/%E5%89%91%E6%8C%87offer/"}]}